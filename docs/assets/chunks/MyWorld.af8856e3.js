import { f, i as D, r as o, o as a, g as p, w as t, e, c as k, k as C, F as M } from "../app.deddeb4f.js"; const P = f({ setup(v) { const n = D(!1), r = () => Math.floor(Math.random() * 20 - 10) * 20, m = () => Math.floor(Math.random() * 20) * 20 + 10; return (x, c) => { const u = o("SDPointerLockControls"), _ = o("SDPerspectiveCamera"), h = o("SDPlaneGeometry"), l = o("SDTextureLoader"), s = o("SDMeshBasicMaterial"), i = o("SDMesh"), d = o("SDBoxGeometry"), S = o("SDScene"), g = o("SDWebglRenderer"); return a(), p(g, { width: 862, height: 400, backgroundColor: 2057169, backgroundAlpha: .5, onClick: c[0] || (c[0] = () => { n.value = !0 }) }, { default: t(() => [e(u, { lock: n.value, unlockCallback: () => { n.value = !1 }, options: { junpHeight: 300, characterHeight: 10, moveScale: 400, mass: 100, movingResistance: 10 } }, null, 8, ["lock", "unlockCallback"]), e(S, null, { default: t(() => [e(_, { positionY: 0 }), e(i, { rotationX: -Math.PI / 2 }, { default: t(() => [e(h, { width: 2e3, height: 2e3 }), e(s, null, { default: t(() => [e(l, { url: "$withBase('/img/crate.gif')", type: "map" })]), _: 1 })]), _: 1 }, 8, ["rotationX"]), (a(!0), k(M, null, C(new Array(500).fill(1), (b, y) => (a(), p(i, { positionX: r(), positionY: m(), positionZ: r() }, { default: t(() => [e(d, { width: 20, height: 20, depth: 20 }), e(s, null, { default: t(() => [e(l, { url: "$withBase('/img/crate.gif')", type: "map" })]), _: 1 })]), _: 1 }, 8, ["positionX", "positionY", "positionZ"]))), 256))]), _: 1 })]), _: 1 }, 8, ["backgroundAlpha"]) } } }); export { P as _ };
